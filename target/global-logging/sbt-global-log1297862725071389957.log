[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\h\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\h\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
[debug]       Load.loadUnit: plugins took 225.06ms
[debug]       Load.loadUnit: defsScala took 0.5116ms
[debug] [Loading] Scanning directory C:\Users\h\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\h\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 24.8277 ms
[debug]           Load.resolveProject(global-plugins) took 76.338ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\h\.sbt\1.0\plugins, plugins: List(<none>))) took 142.6232ms
[debug] [Loading] Done in C:\Users\h\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 177.1279ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4162ms
[debug]     Load.loadUnit(file:/C:/Users/h/.sbt/1.0/plugins/, ...) took 417.5434ms
[debug]   Load.apply: load took 768.152ms
[debug]   Load.apply: resolveProjects took 13.3964ms
[debug]   Load.apply: finalTransforms took 145.5437ms
[debug]   Load.apply: config.delegates took 19.0321ms
[debug]   Load.apply: Def.make(settings)... took 844.7228ms
[debug]   Load.apply: structureIndex took 195.6972ms
[debug]   Load.apply: mkStreams took 2.4828ms
[info] loading global plugins from C:\Users\h\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5028.2756ms
[debug]           Load.loadUnit: plugins took 62.4666ms
[debug]           Load.loadUnit: defsScala took 0.0104ms
[debug] [Loading] Scanning directory C:\Users\h\Desktop\Project\isHappyNumber\project
[debug]             Load.loadUnit: mkEval took 53.4128ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\h\Desktop\Project\isHappyNumber\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.42 ms
[info] loading settings for project ishappynumber-build from idea.sbt ...
[debug]               Load.resolveProject(ishappynumber-build) took 5.836ms
[debug]             Load.loadTransitive: finalizeProject(Project(id ishappynumber-build, base: C:\Users\h\Desktop\Project\isHappyNumber\project, plugins: List(<none>))) took 11.4185ms
[debug] [Loading] Done in C:\Users\h\Desktop\Project\isHappyNumber\project, returning: (ishappynumber-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 5165.9653ms
[debug]           Load.loadUnit: cleanEvalClasses took 13.8196ms
[debug]         Load.loadUnit(file:/C:/Users/h/Desktop/Project/isHappyNumber/project/, ...) took 5244.4429ms
[debug]       Load.apply: load took 5247.5747ms
[debug]       Load.apply: resolveProjects took 0.2296ms
[debug]       Load.apply: finalTransforms took 20.6269ms
[debug]       Load.apply: config.delegates took 0.859ms
[debug]       Load.apply: Def.make(settings)... took 133.5909ms
[debug]       Load.apply: structureIndex took 37.1209ms
[debug]       Load.apply: mkStreams took 0.0035ms
[info] loading project definition from C:\Users\h\Desktop\Project\isHappyNumber\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 12107.1194ms
[debug]     Load.loadUnit: defsScala took 0.0056ms
[debug] [Loading] Scanning directory C:\Users\h\Desktop\Project\isHappyNumber
[debug]       Load.loadUnit: mkEval took 0.6307ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.7263 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 113.9452ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\h\Desktop\Project\isHappyNumber, plugins: List(<none>))) took 119.1721ms
[debug] [Loading] Done in C:\Users\h\Desktop\Project\isHappyNumber, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 3112.0593ms
[debug]     Load.loadUnit: cleanEvalClasses took 50.3411ms
[debug]   Load.loadUnit(file:/C:/Users/h/Desktop/Project/isHappyNumber/, ...) took 15271.2582ms
[debug] Load.apply: load took 15273.502ms
[debug] Load.apply: resolveProjects took 0.1491ms
[debug] Load.apply: finalTransforms took 45.2974ms
[debug] Load.apply: config.delegates took 0.3962ms
[debug] Load.apply: Def.make(settings)... took 135.417ms
[debug] Load.apply: structureIndex took 51.2723ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to VijayProject (in build file:/C:/Users/h/Desktop/Project/isHappyNumber/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51727 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51727, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to VijayProject (in build file:/C:/Users/h/Desktop/Project/isHappyNumber/)
[debug] > Exec(idea-shell, None, None)
